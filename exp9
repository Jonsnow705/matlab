clc; 
close all; 
N = 20000; 
SNR_limit = 35; 
SNR_db = -5:0.5:SNR_limit; 
SNR = 10.^(SNR_db/10); 

% Generate random variables
u = rand(1, N); 
m = floor(2 * rand(1, N)); 

var = 1; % sigma^2 
nstd = sqrt(var); 
y = zeros(1, N); 

% Error probability arrays
Pe_BPSK_sim = zeros(1, length(SNR)); 
Pe_BFSK_sim = zeros(1, length(SNR)); 
Pe_DPSK_sim = zeros(1, length(SNR)); 

% 4(a) Generate Rayleigh random variable
r = sqrt(-2 * var * log(u)); 

% Histogram plot
figure(1); 
histogram(r, 100); 
title('Rayleigh Random Variable Histogram Plot');
xlabel('Random Variable R'); 
ylabel('Frequency'); 

% Rayleigh PDF Plot
a = 0:0.01:10; 
R = (a / var) .* exp(-(a .* a) / (2 * var)); 
figure(2); 
plot(a, R, 'b'); 
title('Rayleigh PDF'); 
xlabel('Random Variable'); 
ylabel('Probability'); 


% BPSK, BFSK, DPSK Error Probability Calculation
Pe_BPSK_id = 0.5 * (1 - sqrt((var * SNR) ./ (1 + var * SNR)));  % BPSK with fading
Pe_BFSK_id = 0.5 * (1 - sqrt(var * SNR ./ (2 + var * SNR)));    % BFSK with fading
Pe_DPSK_id = 0.5 ./ (1 + var * SNR);                            % DPSK with fading

% Without fading (AWGN)
Pe_BPSK_NF = 0.5 * erfc(sqrt(SNR)); 
Pe_BFSK_NF = 0.5 * erfc(sqrt(SNR / 2)); 
Pe_DPSK_NF = 0.5 * exp(-SNR); 

% Performance plot
figure(3);
semilogy(SNR_db, Pe_BPSK_id, 'r.-', ...
         SNR_db, Pe_BFSK_id, 'r*-', ...
         SNR_db, Pe_DPSK_id, 'r-', ...
         SNR_db, Pe_BPSK_NF, 'b.-', ...
         SNR_db, Pe_BFSK_NF, 'b*-', ...
         SNR_db, Pe_DPSK_NF, 'b--'); 
axis([-5 SNR_limit 1e-6 1]); 
title('Performance of BPSK, BFSK, DPSK');
xlabel('SNR (dB)'); 
ylabel('Probability of Error'); 
legend('Pe of BPSK with fading', 'Pe of BFSK with fading','Pe of DPSK with fading','Pe of BPSK without fading', 'Pe of BFSK without fading', 'Pe of DPSK without fading');
grid on;


clc;  
Eb = 1; % Energy per bit  
EbNo_dB = 0:5:35; % Vary the average SNR in dB  
No_over_2 = Eb * 10.^(-EbNo_dB / 10); % Noise power  
sigma = 1; % Rayleigh parameter  
var = sigma^2; % Variance  
BER = zeros(1, length(EbNo_dB)); % Initialize BER array  
for i = 1:length(EbNo_dB) 
    no_errors = 0; 
    no_bits = 0;  
    % Assume: m = 0 (All-zero codeword is transmitted)  
    while no_errors <= 10  
        u = rand;  
        % Generate Rayleigh distributed alpha  
        alpha = sigma * sqrt(-2 * log(u));  

        % Generate noise (Gaussian)  
        noise = sqrt(No_over_2(i)) * randn;  

        % Received signal  
        y = alpha * sqrt(Eb) + noise;  

        % Decision rule: BPSK detection  
        if y <= 0  
            y_d = 1; % Error (bit flipped)  
        else  
            y_d = 0; % Correct detection  
        end  

        no_bits = no_bits + 1;  
        no_errors = no_errors + y_d;  
    end  

    % Compute BER (Bit Error Rate)  
    BER(i) = no_errors / no_bits;  
end  
rho_b = Eb ./ No_over_2 * var;  
P2 = 1/2 * (1 - sqrt(rho_b ./ (1 + rho_b)));  
semilogy(EbNo_dB, BER, '-*', EbNo_dB, P2, '-o');  
title('Monte Carlo Simulation for Performance of BPSK Signal');  
xlabel('Average SNR per bit (dB)');  
ylabel('Error Probability');  
legend('Monte Carlo simulation', 'Theoretical value');  

